import java.util.regex.Pattern

/*
 * Gets the version name from the latest Git tag
 */
def getNewVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.6.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
}

dependencies {
    compile "com.android.support:appcompat-v7:19.0.0"
    compile "com.android.support:support-v4:19.0.0"
    compile "se.emilsjolander:stickylistheaders:2.1.3"
    compile "ch.acra:acra:4.5.0"
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.0"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    buildTypes {
        release {
            applicationVariants.all { variant ->
                def file = variant.outputFile
                variant.outputFile = new File((String)file.parent,
                        file.name.replace(".apk", "-"+ getNewVersionName() + ".apk"))
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////
// Tasks related to setting the correct version number automatically //
///////////////////////////////////////////////////////////////////////
task('setVersionName') {
    android.buildTypes
    def manifestFile = file("AndroidManifest.xml")
    def pattern = Pattern.compile("versionName=\".*\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionName = getNewVersionName()
    println "VersionName: " + versionName
    def manifestContent = matcher.replaceAll("versionName=\"" + versionName +"\"")
    manifestFile.write(manifestContent)
}

tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn setVersionName }

////////////////////////////////////////////////////
// NDK Support (by https://gist.github.com/pboos) //
////////////////////////////////////////////////////
// Make sure the environment variable $ANDROID_NDK_HOME is set:
// example: ANDROID_NDK_HOME /home/maffen/SDKs/android-ndk-r8e
task copyNativeLibs(type: Copy, dependsOn: 'ndkBuild') {
    dependsOn 'ndkBuild'
    from(new File('libs')) { include '**/*.so' }
    into new File(buildDir, 'native-libs')
}

tasks.withType(JavaCompile) { compileTask -> compileTask.dependsOn copyNativeLibs }

clean.dependsOn 'cleanCopyNativeLibs'

tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
    pkgTask.jniDir new File(buildDir, 'native-libs')
}

task ndkBuild(type: Exec) {
    commandLine new File((String)System.env.ANDROID_NDK_HOME, 'ndk-build')
}