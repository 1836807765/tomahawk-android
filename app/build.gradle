apply plugin: "com.android.application"

repositories {
    flatDir {
        dirs 'libs'
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 22
        renderscriptTargetApi 20
        renderscriptSupportModeEnabled true
        def version = readVersionName()
        def code = Integer.parseInt(version.replaceAll('([\\d\\.]*).*', '$1').replaceAll('\\.', ''))
        println("version code: $code")
        versionName version
        versionCode code
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        jumboMode true
        javaMaxHeapSize "2g"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.
                        replace(".apk", "-" + project.ext.getNewVersionName() + ".apk")
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled true
            proguardFiles "../proguard-android.txt"
        }
        debug {
            versionNameSuffix "_debug"
            zipAlignEnabled true
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'
            universalApk true
        }
    }
}

/*
 * Tries to get the version name from the latest Git tag
 */
ext.getNewVersionName = { ->
    try {
        boolean isChanged = 'git diff --cached'.execute([], projectDir).text.length() > 0 ||
                'git diff'.execute([], projectDir).text.length() > 0
        return 'git describe --tags'.execute([], projectDir).text.replace('\n', '') +
                (isChanged ? "_modified" : "")
    }
    catch (IOException e) {
        logger.error("Wasn't able to get version tag: " + e.getMessage());
        return defaultConfig.versionName + "_nogit"
    }
}

// map for the version code
ext.versionCodes = ['armeabi-v7a': 2, 'arm64-v8a': 3, 'mips': 4, 'x86': 6, 'x86_64': 7]
ext.versionNames = ['armeabi-v7a': '_armv7a', 'arm64-v8a': '_armv8a', 'mips': '_mips',
                    'x86'        : '_x86', 'x86_64': '_x86_64']

android.applicationVariants.all { variant ->
    // assign different version code for each output
    variant.outputs.each { output ->
        output.versionCodeOverride =
                project.ext.versionCodes.
                        get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1000 +
                        android.defaultConfig.versionCode
    }
    // assign different version name for each output
    variant.outputs.each { output ->
        output.versionNameOverride = project.ext.getNewVersionName() +
                project.ext.versionNames.get(output.getFilter(com.android.build.OutputFile.ABI), 0)
    }
}

def Properties props = new Properties()
def propFile = file('signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        android.buildTypes.release.signingConfig = android.signingConfigs.release
        android.buildTypes.debug.signingConfig = android.signingConfigs.release
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile(name: 'circularprogressview-debug', ext: 'aar')
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile 'com.android.support:support-v4:24.1.1'
    compile 'se.emilsjolander:stickylistheaders:2.7.0'
    compile('ch.acra:acra:4.7.0') {
        transitive = false
    }
    compile 'com.google.code.gson:gson:2.5'
    compile 'com.google.android.gms:play-services-base:8.4.0'
    compile('com.stanfy:gson-xml-java:0.1.7') {
        exclude group: 'xmlpull', module: 'xmlpull'
    }
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.okhttp:okhttp:2.7.2'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.7.2'
    compile 'com.squareup.okhttp:logging-interceptor:2.7.2'
    compile 'com.github.castorflex.smoothprogressbar:library:1.1.0'
    compile 'de.mrmaffen:vlc-android-sdk:1.9.8'
    compile 'org.apache.lucene:lucene-core:4.7.2'
    compile 'org.apache.lucene:lucene-analyzers-common:4.7.2'
    compile 'org.apache.lucene:lucene-queryparser:4.7.2'
    compile 'commons-io:commons-io:2.4'
    compile 'net.sourceforge.findbugs:jsr305:1.3.7'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.sothree.slidinguppanel:library:3.2.1'
    compile 'com.uservoice:uservoice-android-sdk:1.2.4'
    compile 'de.greenrobot:eventbus:2.4.1'
    compile 'com.daimajia.swipelayout:library:1.2.0@aar'
    compile 'org.jdeferred:jdeferred-android-aar:1.2.4'
    compile 'org.slf4j:slf4j-android:1.7.13'
}
